0:00 | OPERATOR: The following content is provided under a
0:01 | Creative Commons license.
0:03 | Your support will help MIT OpenCourseWare continue to
0:06 | offer high quality educational resources for free.
0:10 | To make a donation, or view additional materials from
0:13 | hundreds of MIT courses, visit MIT OpenCourseWare at
0:17 | ocw.mit.edu.
0:19 | PROFESSOR: So you may recall that, in the last lecture, we
0:25 | more or less solved the drunken student problem,
0:29 | looking at a random walk.
0:32 | I now want to move on and discuss some variants of the
0:36 | random walk problem that are collectively known as biased
0:42 | random walks.
0:53 | So the notion here is, the walk is still stochastic but
0:57 | there is some bias in the direction, so the movements
1:01 | are not uniformly distributed or equally distributed in all
1:05 | directions.
1:07 | As I go through this, I want you to sort of, think in
1:11 | advance about what the take-home message should be.
1:16 | One, and this is probably the most important part for today,
1:20 | is I want to illustrate how by designing our programs in a
1:24 | nice way around classes, we can change them to do
1:29 | something else writing a minimal amount of code.
1:35 | And the idea here is that classes are not there just to
1:39 | provide some syntax that makes life complicated, but to
1:42 | actually provide a mechanism that lets us structure our
1:46 | programs in a way that we can modify them later.
1:52 | I also want to give you a bit more experience looking at
1:55 | data, and understanding how, when you get the results of a
1:59 | simulation or anything else that provides you with data,
2:04 | you can plot, them study the plots, and try and use those
2:08 | to develop an understanding about what's going on.
2:12 | And finally, I want to just get you thinking more about
2:16 | random behavior.
2:18 | Because we're going to talk a lot more this semester and in
2:21 | general throughout your careers, you'll see a lot of
2:24 | uses of stochastic things.
2:26 | All right, so let's think about these biased walks.
2:31 | So for example, assume that the drunk grew up in South
2:36 | Florida, and really hates the New England winter.
2:40 | Well there might be a bias that even though the drunk is
2:43 | not in total control, she's kind of wandering southward.
2:48 | So there's a bias when taking a step to more likely go south
2:52 | than certainly north.
2:55 | Or imagine that the drunk is photosensitive and moves
2:59 | either towards the sun or away from the sun,
3:02 | or some such thing.
3:04 | So we're going to look at different things of that
3:06 | nature and think about, I'll come back to Chutes and
3:09 | Ladders later in the lecture, you can speculate
3:13 | on why this is here.
3:19 | And we'll look at that.
3:21 | So, this is on the front page of your handout here.
3:26 | I've taken the random walk program we looked at last time
3:32 | and changed it a bit.
3:35 | And in particular, I've changed the
3:41 | way the drunk works.
3:46 | So let's look at the code.
3:50 | Wow, haven't even done anything it's --
3:52 | see how this works.
4:07 | So now, drunk itself is a very small class, one I don't
4:14 | actually intend to ever instantiate.
4:19 | I've pared it down, it has only two methods in it.
4:23 | It has an init, which is the same as before, and a move
4:29 | which is the same as before, almost the same.
4:35 | Now I'm going to have the class usual drunk.
4:40 | That's the drunk we looked at the last time.
4:42 | And this usual drunk will behave just like the drunk we
4:45 | looked at last time.
4:48 | In here, I'm going to override the move method of the
4:55 | inherited superclass, and what this is going to do is, it's
5:02 | going to make the same random choice it made before and then
5:07 | it's going to call drunk dot move with
5:10 | the new compass point.
5:14 | So all I've done is, I've taken a couple of lines of
5:17 | code out of the previous implementation and moved it to
5:21 | the subclass.
5:23 | So it's now, excuse me, in the subclass I'm making the
5:29 | decision about which direction to move.
5:32 | Once I've made that decision, then I can call the drunk in
5:37 | the superclass.
5:39 | Notice here, when I've made the call, drunk dot move.
5:47 | So usually you're expecting me to write
5:50 | something like d dot move.
5:54 | The object.
5:55 | Here, instead I'm specifying which class to get the move
6:01 | from, So this is saying, don't call my local move, call the
6:07 | move from the superclass.
6:11 | There are a number of other syntaxes I could've used to
6:14 | accomplish the same thing.
6:16 | I used this because it seemed the most straightforward.
6:24 | Now let's compare the usual drunk to the cold drunk.
6:29 | So the cold drunk, again, I've overridden the move, and now
6:35 | it does something different.
6:37 | It gets the random compass point as before, but if it
6:42 | happens to be south, it calls drunk dot move
6:47 | with twice the distance.
6:53 | So whenever I get the notion I'm moving south, because I
6:59 | love the warmth, I actually move twice as fast. So instead
7:04 | of taking one step, which I do to the other compass points,
7:07 | if I happen to be going south I'll take two steps.
7:11 | So I'm biased towards moving southward.
7:17 | And then I call drunk dot move.
7:23 | Otherwise, I call drunk dot move with
7:26 | the distances before.
7:30 | So I've isolated into the subclass this notion of being
7:34 | heat-seeking.
7:38 | We've got a third sub class, ew drunk, known
7:42 | for east west drunk.
7:47 | And here, what I've done is, I choose to compass point and
7:52 | then while it's not either east or west, I choose again.
7:57 | So this drunk can only move eastward or westward.
8:00 | Can't move north or south.
8:07 | So again you'll see I'm able to have three kinds of drunks.
8:12 | Who as we will see, exhibit rather different behavior from
8:15 | each other with a minimal amount of change to the code.
8:25 | If we look down at the bottom, we'll see that the code is
8:33 | pretty much exactly what it was last time.
8:37 | By the way, this doesn't quite match the
8:39 | code in your handout.
8:40 | I decided to make the plots a little bit prettier with
8:44 | better titles and things, but when I tried to put these in
8:47 | your handouts it wouldn't fit.
8:49 | So I have a little more compact things, but this is, I
8:53 | think, a better way to write it.
8:55 | But essentially, perform trial, perform sim, answer
9:00 | quest, are all identical to what they were before.
9:05 | So because I structured my program in such a way that the
9:11 | drunk's behavior was independent of all the code
9:15 | for the generating the trials and plotting the results, I
9:21 | didn't have to change any of that.
9:24 | And this is the key to good design.
9:27 | Is to isolate decisions in small parts of your program,
9:33 | so when as inevitable happens, you want to enhance the
9:37 | program, or you discover you've done something wrong,
9:40 | the number changes you make is not large.
9:48 | OK, one thing we do need to look at down here is, it's not
9:53 | quite the same as before, because we'll see that there's
9:57 | an extra parameter to these things called drunk type.
10:06 | So if we start with answer question, it takes as before,
10:10 | the time, the number of trials, a title, and this one
10:14 | extra thing called the drunk type.
10:18 | And then when it goes on and it calls perform sim, it
10:22 | passes the drunk type.
10:27 | And this is the key line here.
10:38 | Before, you may recall we just said d equals
10:41 | drunk with the arguments.
10:45 | Here, I say d equals drunk type.
10:51 | So what is drunk type?
10:56 | Drunk type is itself a type.
11:00 | We can use types, you know variables can have as their
11:04 | values types, parameters can have as their values types.
11:09 | So I'm just passing the type around so that here, when it
11:13 | comes time to get a drunk, I get a drunk of
11:17 | the appropriate type.
11:21 | So I can now answer the question about a usual drunk,
11:25 | or a cold drunk, or a ew drunk.
11:31 | This is very common kind of programming paradigm.
11:36 | We've talked about it before, but this is yet another
11:40 | example of how we use polymorphism.
11:44 | Polymorphism.
11:47 | We write our code in such a way that it works with many
11:51 | types of objects.
11:54 | Here we're writing code that will work with
11:57 | any subtype of drunk.
12:01 | Now I'd better not pass it a float.
12:04 | You know, if I answer quest, and instead of something like
12:08 | usual drunk or cold drunk or e w drunk, I pass it float or
12:12 | int, the world will come crashing down around my head.
12:17 | But I haven't, so you'll see down here, I pass it num
12:21 | steps, number trials, and usual drunk.
12:27 | Which is the name of?
12:28 | A class.
12:33 | Any questions about this?
12:38 | Yes?
12:39 | STUDENT: [INAUDIBLE]
12:45 | PROFESSOR: Louder, please?
12:46 | STUDENT: [INAUDIBLE]
12:53 | PROFESSOR: Good, good question.
12:54 | The question is, does a drunk type make a new drunk?
12:58 | Now, I have so much candy to choose from, I don't know what
13:00 | to throw you.
13:02 | Do you like Tootsie Rolls, Snickers, Tootsie Roll Pops,
13:07 | Dots, what's your choice?
13:11 | Snickers.
13:19 | OK, so what is it?
13:23 | Down here nothing is created when that call was made.
13:29 | It was if I had typed the word float or int.
13:34 | I'm merely saying, here is a type, and the parameter should
13:41 | now be bound to that type.
13:45 | Now any time you use the parameter, it's just as if you
13:49 | had written the string, in this case, usual drunk.
13:56 | So when I get up to here, think about, it will take, the
14:08 | variable drunk type, evaluate it, it will evaluate to a type
14:19 | usual drunk, say, in the first call.
14:23 | And then it will, just as if I had written usual drunk,
14:28 | invoke the init method of drunk, and create a new drunk,
14:34 | but this drunk will be of type usual drunk
14:36 | rather than a drunk.
14:40 | Does that make sense?
14:44 | All right, so this avoids my having to write a whole bunch
14:50 | of tests, I could have passed a string, and said if the
14:54 | string said usual drunk, then d equals something.
14:59 | But here instead of that, I'm actually
15:00 | passing the type itself.
15:07 | OK?
15:12 | So other than the fact that I have to pass the type around,
15:16 | this is exactly the same as before.
15:21 | Now just for fun, we saw that last time when I asked you
15:26 | what did usual drunk do, there was some confusion.
15:30 | Not confusion, just a bad guess about how the drunk
15:34 | would wander.
15:35 | So, let's try it again.
15:38 | What do you think about the cold drunk?
15:44 | Will the cold drunk get further from the origin than
15:48 | the usual drunk?
15:50 | Not further from the origin?
15:51 | Who thinks the cold drunk will be further away
15:55 | the end of 500 steps?
15:56 | Who thinks the cold drunk will not be further away?
16:01 | And I'll bet we can all agr -- got that right, I think -- and
16:05 | I'll bet you'll all agree that, with higher probability,
16:08 | the cold drunk will be south of the origin than north of
16:12 | the origin.
16:14 | More interesting, how about the ew drunk?
16:19 | So this is a drunk that only goes east or west, east or
16:24 | west. Will this drunk, well, first of all, what's the
16:31 | expected distance?
16:33 | Do you think it should be close to zero or
16:34 | not close to zero?
16:37 | Who thinks it should be close to 0?
16:41 | Who thinks it won't be close to 0?
16:44 | Well you guys have all fallen for the same trick you fell
16:47 | for last time.
16:49 | Fooled you twice.
16:50 | Be careful, one more and you're out.
16:54 | As we'll see.
16:56 | But it's interesting.
16:57 | So let's run this program and see what happens.
17:12 | I can take a just a second or two and we should
17:15 | get a bunch of plots.
17:22 | All right, so here's the usual drunk.
17:25 | 100 trials and just as before, wandered away.
17:33 | Moderately smooth, but of course little ups and downs,
17:36 | maybe suggesting averaging over 100 trials
17:39 | is not quite enough.
17:42 | I felt a little better if it were smoother, but the trend
17:45 | is pretty clear here, I think we probably don't doubt it.
17:52 | Well, look at cold drunk.
17:56 | Like a shot heading south.
18:00 | So here we see, there's bias, that if you get south you go
18:04 | twice as far makes a huge difference.
18:08 | Instead of being roughly 20 steps away, it's roughly 120
18:13 | steps away.
18:16 | So we see, and this is something to think about, a
18:21 | small bias can end up making a huge difference over time.
18:27 | This is why casinos do so well.
18:31 | They don't have to have a very much of a bias in their favor
18:34 | on each roll of the dice in order to accumulate a lot of
18:37 | money over time.
18:40 | It's why if you just weigh your dice a little bit, so
18:43 | that they're not fair, you'll do very very well.
18:47 | I'm not recommending that.
18:52 | Kind of interesting.
18:55 | The e w drunk is pretty much the same distance away as the
18:59 | usual drunk.
19:04 | This is why we run these simulations, is because we
19:10 | learn things.
19:10 | Now, I have to confess, it fooled me, too.
19:13 | The first time I ran this, I looked at this and said, wait
19:16 | a minute, that's not what I expected.
19:20 | So I scratched my head, and thought about, all right, why
19:24 | is it behaving this way?
19:27 | This happens me a lot in my own research, that I crunch
19:32 | some data, do some plots, look at it, get surprised, and on
19:36 | the basis of that I learned something about the underlying
19:41 | system I'm modeling.
19:42 | Because it provokes me to think in ways I had not
19:46 | thought before I saw the data.
19:49 | This is an important lesson.
19:50 | You don't ignore the data, you try and explain the data.
19:54 | So when I thought about what happened, I realize that while
19:58 | I might have started at the origin, and after the first
20:02 | step I'm equally likely to be here or here.
20:07 | Once I've taken the first step, now my expected location
20:17 | is not zero, right?
20:20 | The first step, my expected location was zero.
20:25 | Because equally likely to be plus 1 or minus 1.
20:29 | But once I've taken a step and I happen to be here, my
20:34 | expected location, if I'm here, is plus 1, it's not 0.
20:40 | Because half the time I'll get back to 0, but half the time
20:43 | I'll get to 2.
20:48 | So once I have moved away from where I've started, the
20:55 | expectation of where I'll end up has changed.
21:03 | This is kind of a profound thing to think about, because
21:07 | when we look at it, this kind of behavior explains a lot of
21:12 | surprising results in life.
21:14 | Where, if you get a small run of random events that take you
21:21 | far from where you started, it's hard to get back.
21:28 | So if you think about the stock market, for example, if
21:32 | you happen to get unlucky and have a few days or weeks or
21:36 | months, as the case may be, where you get a run of bad
21:40 | days, it's really hard to get back if all the movements
21:44 | after that are random.
21:46 | Because you've established a new baseline.
21:50 | And as we'll see later, when you start doing things at
21:53 | random, it's likely you'll get a few runs in one direction or
21:57 | another, and then you've got a new baseline, and it's
22:01 | unlikely to get back to where you were originally.
22:04 | We'll see a lot of examples of this.
22:07 | But that's what's happening here, and that's why it looks
22:13 | the way it does.
22:17 | That makes sense to people?
22:20 | Well, so I had this theory, as I often do when I have
22:24 | theories, I don't believe them, so I decided I better
22:28 | write some more code to check it out.
22:34 | So, what I did is, I took the previous simulation and now
22:40 | instead of looking at different kinds of drunks, I
22:43 | got more aggressive in thinking about my
22:46 | analysis of the data.
22:50 | So again, there's a lesson here.
22:53 | I decided I wanted to analyze my data in new ways.
22:58 | And the beauty of it was, I could do that without changing
23:03 | either any of the code about the drunk, or any they of the
23:07 | code about performing the simulation, really.
23:10 | All I had to do was do a different kind of analysis to
23:14 | a first approximation.
23:18 | So, let's look at what I've done here.
23:26 | What I've decided to do here is not only plot, and again, I
23:30 | think you'll see this code, not only plot how far from the
23:37 | origin the drunk is over time, but I'm going to actually plot
23:44 | two other things.
23:46 | I'm going to use a scatter plot, I think I use scatter in
23:51 | this one, I do, to show where the drunk is at
23:54 | each period of time.
23:56 | Actually, just all the places the drunk
23:58 | ends up in each trial.
24:00 | This will give me a visualized way just see, OK, in my, say,
24:04 | 100 trials, how many the drunk ended up near the origin, how
24:08 | many of them ended up really far away?
24:11 | And just, allow me to visualize what's going on.
24:16 | And then I'm going to also use a histogram to sort of
24:19 | summarize some things.
24:21 | To get a look at the distribution of the data.
24:34 | We've been just looking at average results, but it's
24:38 | often the case that the average does not really tell
24:41 | the whole story.
24:44 | You want to ask, well, how many of the drunks ended up
24:46 | really far away?
24:48 | How many of the drunks ended up where they started?
24:51 | You can't tell that from the averages.
24:55 | So you use a distribution, which tells you information
24:59 | about how many people ended up where.
25:03 | So we again saw that, in a less pleasant context, maybe,
25:07 | in looking at the quizzes, remember I sent you some plots
25:10 | about the quizzes, and I didn't just say,
25:13 | here was the average.
25:16 | I showed you the distribution of grades.
25:20 | That allowed you to see, not only where you were relative
25:23 | to the average, but whether you were an outlier.
25:27 | Was your grade much better than the average?
25:30 | Or were there a whole bunch of people around where you are?
25:33 | So there's a lot of information there, that will
25:37 | help us understand what's really going on.
25:41 | So we'll run this now.
25:45 | Again, there's nothing very interesting here about how I
25:48 | did it, I just used some of these Pylab dot hist, which
25:52 | gives me a histogram, Pylab dot scatter, which gives me a
25:55 | scatter plot.
25:57 | I'll take 500 steps, 400 trials.
26:01 | I've done some more trials here, so we get some smoother
26:04 | lines, better distributions.
26:07 | And then I'm going to look at the usual drunk and ew drunk
26:10 | only, just to save some time.
26:24 | At least I think I am.
26:31 | My computer runs faster when it's plugged in.
26:35 | All right, but we have our figures here,
26:37 | let's look at them.
26:40 | So here's figure one, the usual drunk.
26:42 | Well, all right, as we've seen this 1000
26:45 | times, or at least six.
26:47 | So doing what it usually does, not quite 20.
26:55 | This is kind of interesting.
26:56 | This is the final locations of the 400 trials
27:00 | of the usual drunk.
27:02 | So we see some information here, that we really couldn't
27:04 | get from the averages.
27:08 | That there are more of these points near the middle, but
27:12 | there are certainly plenty scattered around.
27:18 | And we get to see that, they're pretty much symmetric
27:21 | around where we started.
27:24 | This is what we would have hoped, right?
27:26 | If we had looked at it, and we had seen all the points up
27:31 | here, or most of them up here, we would have said, wait a
27:34 | minute, there's something wrong with my code.
27:38 | This was supposed to not be a biased walk,
27:40 | but an unbiased walk.
27:43 | And if I'd seen a bias in this population, I should have
27:47 | gotten nervous that I had some problems with my
27:50 | implementation.
27:51 | My simulation.
27:53 | So in addition to helping me understand results, this gives
27:56 | me some confidence that I really am doing an unbiased
28:00 | walk, right?
28:03 | Some over here, some over here.
28:04 | Not exactly the same, but close enough that I feel
28:09 | pretty comfortable.
28:19 | And if I look at the distribution, which probably I
28:25 | could've if I worked really hard, gotten from the scatter
28:27 | plot, but I really didn't want to, we'll see that most of the
28:34 | drunks actually do end up pretty close to the origin.
28:39 | But that there are a few that are pretty far away.
28:43 | And again, it's close to symmetric around zero.
28:49 | Which gives me a good feeling that things are working the
28:52 | way they should.
28:54 | This, by the way, is what's called a normal distribution.
29:00 | Because once upon a time, people believed this was the
29:04 | way things usually happened.
29:07 | This is called either normal or Gaussian.
29:16 | The mathematician Gauss was one of the first people to
29:18 | write about this distribution.
29:20 | We'll come back to this later, and among other things, we'll
29:24 | try and see whether normal is really normal.
29:27 | But you see it a lot of times.
29:29 | And basically what it says is that most of the values hang
29:34 | out around the average, the middle.
29:38 | And there are a few outliers, and as we get further and
29:42 | further out, fewer and fewer points occur.
29:49 | So you'll see these kind of curves, of distributions,
29:52 | occurring a lot.
29:53 | Again, we'll come back to distributions in a week, or
29:56 | actually in a lecture or two.
29:58 | See a little bit more today, and then more later on.
30:03 | All right, here's our east west drunk, again as before,
30:13 | drifting off to around 18.
30:18 | Well, look at these dots.
30:23 | Well, this makes me feel, that at least I know that the drunk
30:26 | is only moving east and west. And again you'll see, pretty
30:31 | dense in the middle and a few outliers.
30:35 | Managed to get a little further east than west, but
30:38 | that happens.
30:41 | East is always more attractive.
30:47 | What we might have guessed.
30:49 | And if we look at the distribution, again we can
30:56 | look at it, and I'm just giving you the east west
30:59 | values here, and again it's about the same.
31:07 | So, what do I want you to take away from these graphs?
31:11 | Different plots show you different things.
31:15 | So I'm not going to try and claim that of these three
31:18 | different plots we did, one is the right one to do.
31:22 | What I'm going to assert is that you want
31:24 | to do all of them.
31:26 | Try and visualize the data in multiple ways.
31:31 | And sometimes it's much easier to, even if different plots
31:36 | contain exactly the same information, and in some sense
31:41 | of the scatter plot and the histogram do contain exactly
31:45 | the same information.
31:47 | In fact, there's more information in the scatter
31:49 | plot, in some sense, because I see each one individually.
31:53 | But it's, for me, a lot harder to see.
31:57 | If I'd ask you from the scatter plot, are they
32:00 | normally distributed?
32:02 | You might have had a hard time answering it.
32:04 | Particularly for the usual drunk, where you just saw a
32:09 | lot of points.
32:10 | So the idea of some summarizing it in the
32:13 | histogram makes it much easier to make sense of the data, and
32:18 | see what you're doing, and to try and learn the lesson
32:21 | you're trying to learn.
32:32 | OK, this makes sense to people?
32:37 | All right, let's move on.
32:40 | Now we'll go back to this lovely picture we had before.
32:48 | Any of you ever play the game Chutes and Ladders?
32:51 | Raise your hand?
32:53 | OK, some things never go out of style.
32:57 | Well, imagine your poor drunk wandering through this board,
33:04 | and every once in a while, because I'm kind of a, not a
33:09 | nice person, I've eliminated all the ladders, and have only
33:12 | some chutes.
33:13 | And every once in a while the drunk hits a
33:15 | chute and goes whoosh.
33:18 | And in fact, let's, for the sake of simplicity here,
33:26 | assume that the chutes are going to, every once in a
33:32 | while, the drunk will hit a bad spot, and go right back to
33:35 | the origin.
33:37 | So this poor, say, heat-seeking drunk who's
33:39 | trying to head south, does it for a while and maybe gets
33:44 | zipped right back to where he or she started.
33:48 | All right, I've now told you I want to put
33:52 | some, make this happen.
33:55 | What part of the code do you think I should change?
34:01 | Somebody?
34:02 | STUDENT: The field.
34:04 | PROFESSOR: The field, absolutely.
34:11 | Those are good to throw short distances.
34:14 | The field, right, because what we're talking about here is
34:17 | not a property of the drunk, or a property of the
34:21 | simulation, but a property of the space in which the drunk
34:26 | is wandering.
34:30 | So again, we see that by structuring the initial
34:33 | program around the natural abstractions that occur in the
34:38 | problem, natural kinds of changes can be localized.
34:46 | So let's go and change the field.
34:52 | So I'm going to have the field I had before plus this thing
34:57 | called an odd field.
35:03 | Odd field will be a subclass of field.
35:06 | This is not odd as in odd or even, this
35:08 | is odd as in strange.
35:12 | So I'm going to first define where my chutes are.
35:19 | So is chute will take, will get the coordinates, and
35:29 | assign it to x and y, so it gets the coordinates of a
35:32 | place, and then will return abs x minus abs
35:37 | y is equal to zero.
35:39 | So, where are my chutes going to occur?
35:45 | Somebody?
35:53 | Yeah, kind of radiating out from the origin.
36:00 | Any place, so I'll have my origin, here.
36:06 | Got my graph.
36:08 | And all along here, any place x and y are equal,
36:13 | there'll be a chute.
36:18 | Now, I have to be a little bit careful that it doesn't happen
36:21 | here, or we won't get anywhere.
36:27 | So, and then move, in odd field, will call field dot
36:32 | move, which is unchanged from what it was before.
36:38 | And then it will say, if self dot is chute, set the location
36:43 | back to 0,0.
36:45 | So the poor drunk will move as before, and if he or she hits
36:50 | this wormhole, get instantly teleported back to the origin.
36:58 | Very small change, but it will give us rather different
37:01 | behaviors, at least I think it will.
37:08 | And then if we look at how we use it, not much changes.
37:17 | Except, what do you think is going to have to change?
37:20 | Where will I have to make the change, somebody?
37:23 | You can actually see the code here.
37:27 | I'll have to get a different field, right?
37:31 | So, at the place where I instantiate a field, instead
37:35 | of instantiating a field, I'll instantiate an odd field.
37:40 | Now if I'd had 16 different kinds of odd fields, or even
37:44 | two, I might well have done what I did with drunk.
37:49 | But in order to sort of minimize things, I've done
37:53 | something much smaller.
37:55 | So let's see, where did we get the field?
37:57 | I don't even remember.
37:59 | So, here's what I do when I'm looking at my program and I
38:03 | want to see where something is.
38:06 | I use the text editor, and I'm going to search for it.
38:13 | Let's see.
38:24 | Well, it's not there.
38:31 | There it is.
38:33 | So here when I get my field, I get my drunk, and then I get a
38:37 | field which is an odd field.
38:44 | All right, anyone want to speculate what will happen
38:46 | when I run this one?
38:54 | Think the drunk will be closer or further from the origin
38:59 | when we're done?
39:00 | Who thinks closer?
39:03 | Who thinks further?
39:05 | Who thinks no difference?
39:07 | Well, you're right, I mean it's sort of logical if we
39:09 | think about it, that if every once in a while you get to
39:12 | zipped, back it's going to be harder to get further away.
39:15 | We'll see different behaviors, by the way, it depends on the
39:17 | drunk, right?
39:19 | That's true for the usual drunk, but maybe not for the
39:23 | east west drunk.
39:27 | We can see what happens.
39:29 | So let's try some.
39:33 | We'll do it for the usual drunk, which is the more
39:36 | interesting case to start with.
39:58 | So you'll see whereas before we were up just shy of 20 most
40:01 | of the time, here we don't get very much much, further.
40:06 | We do get steadily further, but at a lot slower pace.
40:13 | What do you think it means that, before you remember, we
40:16 | saw a pretty smooth line.
40:17 | Here we see what may look you like a fat line, but is in
40:21 | fact a line with a lot of wiggles in it.
40:25 | What does that imply, about what's going on in the
40:30 | simulation, the fact that line is jagged rather than smooth
40:36 | as it was before?
40:41 | Pardon?
40:43 | Can't hear you?
40:44 | STUDENT: That it jumps.
40:44 | PROFESSOR: Well, certainly it happens because of the jumps,
40:50 | but what else is going on?
40:51 | But what is it, sort of, imply more, whoa, sorry about that,
40:55 | more generally?
40:57 | Right, what it's saying, is that because of the jumps,
41:01 | there's a lot more variation from trial to trial.
41:07 | Not surprising, right, because you sometimes you hit these
41:09 | wormholes and sometimes you don't.
41:12 | So let's look at this other figure.
41:15 | This is kind of interesting.
41:18 | So here's the scatter plot.
41:24 | And if we zoom in on it, what we see here is, there are
41:37 | essentially holes, you know, these alleys
41:41 | where no points lie.
41:46 | Just as we might have guessed from here.
41:50 | The only way you would get a point lying on these alleys,
41:52 | if it happened to be the very last step of the simulation,
41:55 | not even then, because the last thing we do is go back to
41:58 | the origin.
42:00 | So we can look at this, and say, well, sure enough, this
42:04 | is keeping people off of a certain part of the field.
42:15 | All right, some of you will be happy to know we are, for the
42:20 | moment, actually maybe for the whole rest of the term,
42:22 | leaving the notion of drunks.
42:24 | Though not of random walks.
42:26 | All right, any questions about what's going on here?
42:30 | And again, I would urge you to sort of study the code and the
42:32 | way it's been factored to accomplish these things.
42:35 | And play with it, and look at what you get from the
42:38 | different plots.
42:40 | I now want to pull back from this specific example, and
42:44 | spend a few minutes talking about simulation in general.
42:50 | Computer simulation really grew hand in hand with the
42:55 | development of the computers, from the very beginning.
42:59 | The first large-scale deployment of computer
43:02 | simulation was as part of the Manhattan Project.
43:15 | This was done during the war to model the process of
43:19 | nuclear detonation.
43:29 | And, in fact, what they did was a simulation of 12 hard
43:33 | spheres, and what would happen when they would
43:37 | bump into each other.
43:38 | It was a huge step forward to do it with simulation, since
43:43 | the whole project had been stalled by their attempt to do
43:47 | this analytically.
43:48 | They were unable to actually solve the problem
43:51 | analytically.
43:52 | And it was only when they hit upon the notion of using a
43:55 | computer, a relatively new tool in those days, to
43:58 | simulate it, that they were able to get the
44:00 | answers they needed.
44:02 | And they did it using something called a Monte Carlo
44:06 | simulation.
44:19 | Now in fact, that's just what we've been doing with the
44:22 | random walk, the Monte Carlo simulation, and I'll come back
44:24 | to that in a minute.
44:27 | In general, the thing to think about, is we use simulation
44:32 | when we really can't get a closed form analytic solution.
44:39 | If you can put down a system of equations and easily solve
44:42 | it to get an answer, that's usually the right thing to do.
44:47 | But when we can't easily do that, the right thing to do is
44:50 | typically to fall back on simulation.
44:54 | Sometimes even when we can do it analytically, simulation
44:57 | has some advantages, as we'll be seeing as we go forward.
45:05 | What we're typically doing when we're simulating
45:07 | anything, is we're attempting to generate a sample of
45:31 | representative scenarios.
45:43 | Because an exhaustive enumeration of all possible
45:47 | states would be impossible.
45:50 | So again, if sometimes you can't solve it analytically,
45:53 | you can exhaustively enumerate the space and then see
45:57 | what's going on.
45:59 | But again, usually you can't.
46:01 | And so we look for a sample, and the key is, it's gotta be
46:05 | representative.
46:07 | Of what we would get in reality.
46:11 | We'll see an example of that shortly.
46:14 | So simulation attempts to build an experimental device
46:20 | that will act like the real system in important aspects.
46:25 | So I always think of a simulation as an
46:29 | experimental device.
46:32 | And every time I run it, I'm running an experiment designed
46:37 | to give me some information about the real world.
46:41 | These things are enormously popular, so if you were to get
46:45 | on Google and look at simulation.
46:52 | So for, example, we could Google simulation finance.
47:00 | You know, we see we get about 3,000,000 hits.
47:06 | We can do biology.
47:13 | We get twice as many hits, showing the relative
47:16 | importance in the world of biology and finance.
47:21 | For all you Course 7 majors, we should make sure that
47:25 | should compare biology to physics.
47:27 | Oh dear, we'll see that physics is even more important
47:31 | than biology.
47:35 | And I know we have a lot of Course 2 students in here, so
47:38 | let's try mechanical.
47:43 | Oh, lot of those, too.
47:45 | And if I did baseball, or football, we'd get more than
47:48 | any of them.
47:50 | Showing the real importance of things in the world.
47:54 | As we look at simulations, I want you to keep in mind that
48:00 | they are typically descriptive not prescriptive.
48:12 | So by that I mean, they describe a situation, they
48:18 | don't tell you what the answer is.
48:22 | So another way to think about this is, a simulation is not
48:28 | an optimization procedure.
48:31 | When we looked at optimization, that was
48:35 | prescriptive.
48:35 | We ran an optimization algorithm, and it gave us the
48:41 | best possible solution.
48:45 | A simulation typically doesn't give you this best possible
48:48 | solution, but if you give it the starting point, it will
48:53 | tell you the consequences of that.
48:58 | Now, can we use simulation to do optimization?
49:01 | Absolutely.
49:03 | For example, we can use it to do guess and check.
49:07 | Where we guess a, probably not to get a truly optimal
49:10 | solution, but to get a good solution, we can guess various
49:15 | possibilities, simulate them, and see.
49:18 | People do that all the time.
49:21 | If they want to see what's the right number of checkout
49:27 | counters at the supermarket, or what's the right airline
49:30 | schedule to use?
49:32 | They'll make a guess, they'll simulate it, and they'll say
49:35 | all right, this was better than this, so we'll choose it.
49:39 | All right, I'm going to stop here.
49:42 | Next time we're going to get more deeply into the actual
49:45 | stochastics, the probability distributions, and start
49:49 | understanding what's going on under the covers.
